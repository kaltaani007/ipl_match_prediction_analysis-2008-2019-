# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2mdBx_GFNsfkFIWuVL0bcfdE2r3nb16
"""

import pandas as pd 
import numpy as np

df = pd.read_csv("matches.csv")

df.head()

df.shape

df.drop('umpire3' , axis = 1)

#most number of wins by team 
df.winner.value_counts()

import matplotlib.pyplot as plt 
import seaborn as sns


cntplot = sns.countplot( x = "winner" , data = df , order  = df.winner.value_counts().index , palette = "rainbow_r")

for c in cntplot.patches:
  print(c)

  
plt.tick_params(rotation = 90)
plt.ylabel("total no of match wins")
plt.show()

df1 = df.sort_values(by ="Season")
df1

sns.countplot(x = 'Season'  , data = df1 )
plt.tick_params(rotation = 90
                )
plt.show()

x = df.city.value_counts().index
y =df.city.value_counts().values
sns.barplot(x = x , y = y , data = df )
plt.tick_params(rotation = 90)
plt.show()

# filtering out the un necassary teams 

df['team1'].unique()

teams = [
    
    'Sunrisers Hyderabad', 'Mumbai Indians', 'Royal Challengers Bangalore',
       'Kolkata Knight Riders', 'Kings XI Punjab',
       'Chennai Super Kings', 'Rajasthan Royals', 
        'Rising Pune Supergiants','Delhi Capitals'
    
]

df['team1'] = df['team1'].str.replace('Delhi Daredevils' , 'Delhi Capitals')
df['team2'] = df['team1'].str.replace('Delhi Daredevils' , 'Delhi Capitals')


df['team1'] = df['team1'].str.replace('Deccan Chargers' , 'Sunrisers Hyderabad')
df['team2'] = df['team1'].str.replace('Deccan Chargers' , 'Sunrisers Hyderabad')

df = df[df['team1'].isin(teams)]
df = df[df['team2'].isin(teams)]

df.head()

df.shape

df['dl_applied'].value_counts()

df = df[df['dl_applied'] == 0 ]

df.head()

match_df = df[['Season', 'team1' , 'team2' ,  'city'  , 'player_of_match' , 'venue' , 'winner']]
match_df.head()

def res(row):
  return 1 if row['team1'] == row['winner'] else 0

match_df['result'] = match_df.apply(res , axis = 1  )
match_df

match_df.shape

match_df = match_df.sample(match_df.shape[0]

#players of match most 

# top 10 players 

player = match_df.player_of_match.value_counts().reset_index()

player = player.head(10)
player.columns = ["player_of_match" , "times"]
player.head()



sns.barplot(x = "player_of_match" , y = "times" ,  data = player)
plt.tick_params(rotation = 90)
plt.title("Top 10 Players getting Player of Match ")
plt.show()

match_df = match_df.drop("player_of_match" , axis = 1)

match_df.sample()

X = match_df.iloc[: , :-1]
Y = match_df.iloc[: , -1]

from sklearn.model_selection import train_test_split
x_tr , x_ts , y_tr , y_ts = train_test_split(X , Y , test_size = 0.2 , random_state = 1)

# preprocessing the data values 
from sklearn.compose import ColumnTransformer 
from sklearn.preprocessing import OneHotEncoder
trf = ColumnTransformer ([
    ('trf' , OneHotEncoder(sparse = False , drop="first") , ['Season' , 'team1' , 'team2' , 'city' , 'venue' , 'winner'])
  ]
, remainder= 'passthrough')

from  sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps = [
    ('step1' , trf), 
    ('step2' , LogisticRegression(solver ='liblinear'))

])

pipe.fit(x_tr, y_tr)

y_pred = pipe.predict(x_ts)
y_pred

from sklearn.metrics import accuracy_score

accuracy_score(y_ts , y_pred)

pipe.predict_proba(x_ts)[9]

